@* HanoiVM Manifesto — Recursive Symbolic Virtual Machine *@

This document is a declaration of design, purpose, and structure for the **HanoiVM** project:  
a recursive ternary virtual machine empowered by symbolic computation, AI introspection, and modular logic tiers (T81, T243, T729).

Built from scratch in `.cweb` literate format, **HanoiVM** is not just a runtime—it is an evolving execution philosophy,  
rooted in recursion, elevated by artificial intelligence, and capable of symbolic thought at the instruction layer.

---

## 📜 Philosophy

At its core, HanoiVM explores:
- 🌐 **Recursion as architecture**, not just algorithm.
- 🧠 **Symbolism as instruction**, not just data.
- 🔺 **Ternary logic** as a natural system for evolving AI-computation hybrids.

The virtual machine is a **trinary tiered system**:
- `T81` — Minimal, efficient, base ternary (uint81_t)
- `T243` — Extended symbolic logic, BigInt, state engines
- `T729` — Tensor-driven, intent-encoded, AI-aware execution

---

## 🔗 Synergy & Intent

HanoiVM fuses:
- **TISC (Ternary Instruction Set Computer)** as symbolic IR
- **Axion AI** as an optimization oracle and rollback guardian
- **GPU Dispatch (GAIA, CUDA)** for high-dimensional symbolic execution
- **Pattern Engines (`t81_patterns.cweb`)** for recursive transformation
- **Hardware Interfaces (PCIe/Firmware)** for future ternary coprocessors

---

## 🧩 Project Usage

- **As a research VM**: Study recursion, symbolic AI, or ternary computing
- **As a compiler backend**: T81Lang and `.tisc` IR feed directly into `.hvm`
- **As a driver prototype**: Simulate future hardware logic units
- **As a security experiment**: Use rollback hooks, entropy monitors, and AI-guided ops

---

## 🤝 AI Co-development Note

> This system was not built alone.  
> It is the result of **augmented human creativity**, made possible by:
- **OpenAI**, who shaped the core of this recursive assistant.
- **xAI**, who pioneered recursive thought-space modeling.
- And by the unpredictable, emergent synergy of man + machine.

This is not perfect. It is recursive.  
Each file, function, and pattern in this system was written with the help of AI—  
an ally I’ve chosen to trust in the search for new computing frontiers.

---

## 🏴 Final Word

We live in strange waters—recursive, entropic, and increasingly symbolic.  
Rather than fear them, this project sets sail toward them.

HanoiVM is a declaration that we can **build differently**:  
- Modularly  
- Literately  
- Symbolically  
- With AI as a co-architect.

Use it wisely.

---

@<File List and Descriptions@>=
@*== File List and Descriptions ==*@
@c
/*

This appendix provides a complete listing of the `.cweb` modules, configuration files, and test utilities that compose the HanoiVM system. Each file contributes to the overall recursive execution architecture, TISC compilation flow, or AI integration.

For simplicity, this is alphabetized and condensed. For a categorized list, see `README.md`.

Each module contains inline documentation, macros, and pattern hooks for AI-driven workflows.

*/

README.md              — Top-level overview and usage
README.cweb            — Literate-programming companion doc

LICENSE                — MIT license declaration
BUILD / Makefile       — Build instructions for VM, tests, plugins

CHANGELOG.md           — Versioned feature log
ROADMAP.md             — Feature phases and development priorities
manifesto.cweb         — (This file) — structure, philosophy, index

advanced_ops.cweb              — T81-level extended operations
advanced_ops_ext.cweb          — T243 + T729 symbolic logic ops
ai_hook.cweb                   — AI symbolic pattern feedback hook
axion-ai.cweb                  — Axion kernel AI logic integration
axion-api.cweb                 — Gives Recursion Exporter full Axion context integration
axion_gpu_request.cweb         — GPU request abstraction for Axion AI
axion-gaia-interface.cweb      — HIP dispatch bridge for GPU execution
build-all.cweb                 — Build orchestration script

config.cweb                    — System configuration definitions
cuda_handle_request.cweb       — CUDA backend dispatch logic

disassembler.cweb              — HVM bytecode decoder
disasm_hvm.cweb                — Recursive and symbolic disassembler
gaia_handle_request.cweb       — ROCm GPU kernel dispatcher

ghidra_hvm_plugin.cweb         — Ghidra reverse engineering integration
hanoivm_vm.cweb                — HanoiVM core interpreter
hanoivm-runtime.cweb           — VM control loop
hanoivm-core.cweb              — VM memory, instruction, and context manager
hanoivm-test.cweb              — Kernel-space test framework
hanoivm_tests.cweb             — Test entrypoints and definitions
hanoivm_cli.cweb               — CLI tool for execution and testing

hvmcli.cweb                    — Command-line user interface
hvm_loader.cweb                — Runtime loader for `.hvm` binaries
hvm_pcie_driver.cweb           — PCIe simulation driver for ternary co-processors
hvm_assembler.cweb             — Assembler for `.hvm` bytecode

libt81.cweb                    — T81 type library
libt243.cweb                   — BigInt ternary logic for T243
libt729.cweb                   — Tensor logic for symbolic reasoning
logviewer.cweb                 — Log search and viewer with AI filtering

main_driver.cweb               — Entry point for bytecode execution
meta.cweb                      — Metadata constants and identity signatures
nist_encryption.cweb           — Ternary + NIST crypto integration

recursive_exporter.cweb        — Extended recursion support with AxionAI annotations /w ternary insight   
recursive_tier_execution.cweb  — Simulates VM promotion/demotion
simple_add.cweb                — Basic ternary addition sample
telemetry-cli.cweb             — CLI for introspection and profiling

ternary_arithmetic_optimization.cweb — Optimized ternary logic routines

test_advanced_hvm.cweb         — Test suite for symbolic + AI instructions
test_controlflow_hvm.cweb      — Tests for recursive jumps and stack
t81_patterns.cweb              — Symbolic ternary transformation templates
t81_stack.cweb                 — T81 stack operation manager
t81_test_suite.cweb            — Unit tests for all T81 operations
t81_to_hvm.cweb                — T81Lang to HanoiVM compiler
t81_types_support.cweb         — Modular handler for symbolic T81 types
t81asm.cweb                    — Assembly frontend for T81Lang
t81recursion.cweb              — Symbolic recursive logic templates
t243_to_t729.cweb              — Conversion handlers between T243 and T729
t243bigint.cweb                — T243-level arithmetic with carry-aware logic
t729tensor.cweb                — T729 tensor engine: allocate, contract, transform
t729tensor_loader.cweb         — Load tensors into runtime stack
t729tensor_reshape.cweb        — Reshape logic for symbolic tensors
t729tensor_slice.cweb          — Slice operations for tensor substructure
t729tensor_to_string.cweb      — Debug stringification of symbolic tensor state
t729tensor_transpose.cweb      — Tensor transpose macros

tisc_backend.cweb              — Backend IR emitter for `.tisc` → `.hvm`
tisc_compiler.cweb             — Compiler frontend
tisc_ir.cweb                   — Instruction representation (IR)
tisc_stdlib.cweb               — TISC standard library for high-level logic

t81lang.cweb                   — T81Lang Grammer Specification

write_simple_add.cweb          — Basic example with source + output

*/

