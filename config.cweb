@* config.cweb | Centralized Configuration for HanoiVM *@

This file defines the global configuration settings for the HanoiVM project.
All components will read these settings to ensure consistent behavior across the system,
while enabling dynamic AI and hardware-driven optimizations.

@d Hardware Configuration
#define ENABLE_PCIE_ACCELERATION   true
#define ENABLE_GPU_SUPPORT         true
#define ENABLE_DYNAMIC_RESOURCE_SCALING true

@d AI Configuration
#define AI_OPTIMIZATION_MODE       "Advanced"
#define ENABLE_ANOMALY_DETECTION   true
#define ENABLE_AI_LOG_FEEDBACK     true

@d Logging Configuration
#define LOG_LEVEL                  "INFO"
#define LOG_OUTPUT_FORMAT          "TEXT"
#define ENABLE_SECURE_MODE         true

@d Resource Management
#define MEMORY_ALLOCATION          4096
#define CPU_AFFINITY               "0,1,2,3"
#define GPU_ALLOCATION             4096
#define ENABLE_RUNTIME_OVERRIDES   true

@d Environment Detection
#define DETECT_GPU                 true
#define DETECT_PCIE_ACCELERATOR    true

@d Global Settings
#define TERNARY_LOGIC_MODE         "T81"
#define ENABLE_ADAPTIVE_MODE_SWITCHING true
#define ENABLE_DEBUG_MODE          true

@d HanoiVM Config Structure
typedef struct {
    bool enable_pcie_acceleration;
    bool enable_gpu_support;
    bool enable_dynamic_resource_scaling;
    char ai_optimization_mode[16];
    bool enable_anomaly_detection;
    bool enable_ai_log_feedback;
    char log_level[8];
    char log_output_format[8];
    bool enable_secure_mode;
    int memory_allocation;
    char cpu_affinity[32];
    int gpu_allocation;
    bool enable_runtime_overrides;
    bool detect_gpu;
    bool detect_pcie_accelerator;
    char ternary_logic_mode[8];
    bool enable_adaptive_mode_switching;
    bool enable_debug_mode;
} HanoiVMConfig;

@d Default Config Initialization
HanoiVMConfig default_config() {
    HanoiVMConfig cfg = {
        .enable_pcie_acceleration = ENABLE_PCIE_ACCELERATION,
        .enable_gpu_support = ENABLE_GPU_SUPPORT,
        .enable_dynamic_resource_scaling = ENABLE_DYNAMIC_RESOURCE_SCALING,
        .ai_optimization_mode = AI_OPTIMIZATION_MODE,
        .enable_anomaly_detection = ENABLE_ANOMALY_DETECTION,
        .enable_ai_log_feedback = ENABLE_AI_LOG_FEEDBACK,
        .log_level = LOG_LEVEL,
        .log_output_format = LOG_OUTPUT_FORMAT,
        .enable_secure_mode = ENABLE_SECURE_MODE,
        .memory_allocation = MEMORY_ALLOCATION,
        .cpu_affinity = CPU_AFFINITY,
        .gpu_allocation = GPU_ALLOCATION,
        .enable_runtime_overrides = ENABLE_RUNTIME_OVERRIDES,
        .detect_gpu = DETECT_GPU,
        .detect_pcie_accelerator = DETECT_PCIE_ACCELERATOR,
        .ternary_logic_mode = TERNARY_LOGIC_MODE,
        .enable_adaptive_mode_switching = ENABLE_ADAPTIVE_MODE_SWITCHING,
        .enable_debug_mode = ENABLE_DEBUG_MODE
    };
    return cfg;
}

@d Apply Env Overrides
void apply_env_overrides(HanoiVMConfig* cfg) {
    const char* mode = getenv("HVM_MODE");
    if (mode) strncpy(cfg->ternary_logic_mode, mode, sizeof(cfg->ternary_logic_mode));

    const char* log_level = getenv("HVM_LOG_LEVEL");
    if (log_level) strncpy(cfg->log_level, log_level, sizeof(cfg->log_level));

    const char* affinity = getenv("HVM_CPU_AFFINITY");
    if (affinity) strncpy(cfg->cpu_affinity, affinity, sizeof(cfg->cpu_affinity));

    // **Suggestion 1:** Additional environment variables for other fields can be added here, 
    // such as for controlling AI behavior, GPU usage, or log verbosity (e.g., `HVM_AI_OPTIMIZATION_MODE`).
}

@d Print Config for Debugging
void print_config(const HanoiVMConfig* cfg) {
    printf("=== HanoiVM Runtime Configuration ===\n");
    printf("PCIe Acceleration: %s\n", cfg->enable_pcie_acceleration ? "Enabled" : "Disabled");
    printf("GPU Support: %s\n", cfg->enable_gpu_support ? "Enabled" : "Disabled");
    printf("AI Optimization: %s\n", cfg->ai_optimization_mode);
    printf("Anomaly Detection: %s\n", cfg->enable_anomaly_detection ? "On" : "Off");
    printf("Log Level: %s | Format: %s\n", cfg->log_level, cfg->log_output_format);
    printf("Secure Mode: %s\n", cfg->enable_secure_mode ? "On" : "Off");
    printf("Ternary Mode: %s\n", cfg->ternary_logic_mode);
    printf("Memory: %d MB | GPU: %d MB\n", cfg->memory_allocation, cfg->gpu_allocation);
    printf("CPU Affinity: %s\n", cfg->cpu_affinity);
    printf("=====================================\n");

    // **Suggestion 2:** Extend the print function to provide more detailed state information about the AI configuration, 
    // resource scaling, or adaptive mode, useful for debugging AI-heavy workloads.
}

@d Example Entry Point
int main() {
    HanoiVMConfig cfg = default_config();
    if (cfg.enable_runtime_overrides) apply_env_overrides(&cfg);
    if (cfg.enable_debug_mode) print_config(&cfg);
    return 0;
}
