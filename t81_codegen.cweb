// t81_codegen.cweb - LLVM Backend Integration for HanoiVM

@* T81 LLVM Backend: Codegen Entrypoints.
This document defines the basic scaffolding for a custom LLVM backend
for the T81 (HanoiVM) ternary virtual architecture. It includes the
`TargetMachine` setup, `ISelLowering`, `DAGISel`, `TargetInfo`, `AsmPrinter`,
a refined `DataLayout`, top-level `.td` definitions, and build system integration.

@<Includes@>
@<T81TargetMachine.cpp@>
@<T81ISelLowering.cpp@>
@<T81DAGISel.cpp@>
@<T81InstrPatterns.td@>
@<T81AsmPrinter.cpp@>
@<T81TargetInfo.cpp@>
@<T81.td@>
@<CMakeLists.txt@>

@*1 Includes.
@<Includes@>=
#include "T81.h"
#include "T81TargetMachine.h"
#include "T81ISelLowering.h"
#include "T81DAGISel.h"
#include "T81AsmPrinter.h"
#include "llvm/CodeGen/TargetPassConfig.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetOptions.h"

using namespace llvm;

@*1 T81TargetMachine.cpp.
@<T81TargetMachine.cpp@>=
namespace llvm {

T81TargetMachine::T81TargetMachine(const Target &T, const Triple &TT,
                                   StringRef CPU, StringRef FS,
                                   const TargetOptions &Options,
                                   Optional<Reloc::Model> RM,
                                   Optional<CodeModel::Model> CM,
                                   CodeGenOpt::Level OL, bool JIT)
    : LLVMTargetMachine(T, "e-p:81:81-i81:81:81-n81:81-S81", TT, CPU, FS, Options,
                        getEffectiveRelocModel(RM),
                        getEffectiveCodeModel(CM, CodeModel::Small), OL),
      Subtarget(TT, CPU, FS, *this) {
  initAsmInfo();
}

TargetPassConfig *T81TargetMachine::createPassConfig(PassManagerBase &PM) {
  return new TargetPassConfig(*this, PM);
}

} // namespace llvm

@*1 T81AsmPrinter.cpp - Assembly Output Support.
@<T81AsmPrinter.cpp@>=
#include "T81AsmPrinter.h"
#include "T81.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/Target/TargetMachine.h"

using namespace llvm;

namespace {

class T81AsmPrinter : public AsmPrinter {
public:
  T81AsmPrinter(TargetMachine &TM, std::unique_ptr<MCStreamer> Streamer)
      : AsmPrinter(TM, std::move(Streamer)) {}

  StringRef getPassName() const override { return "T81 Assembly Printer"; }

  void emitInstruction(const MachineInstr *MI) override {
    MCInst OutInst;
    LowerT81MachineInstrToMCInst(MI, OutInst, *this);
    OutStreamer->emitInstruction(OutInst, getSubtargetInfo());
  }
};

} // end anonymous namespace

extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeT81AsmPrinter() {
  RegisterAsmPrinter<T81AsmPrinter> X(getTheT81Target());
}

@*1 T81TargetInfo.cpp - Target Triple Registration.
@<T81TargetInfo.cpp@>=
#include "llvm/Support/TargetRegistry.h"
using namespace llvm;

extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeT81TargetInfo() {
  RegisterTarget<Triple::t81> X(getTheT81Target(), "t81", "T81 Ternary Target", "T81");
}

@*1 T81.td - Top-Level Target Definition.
@<T81.td@>=
include "llvm/Target/Target.td"

//===----------------------------------------------------------------------===//
// Target declaration for T81
//===----------------------------------------------------------------------===//

def T81 : Target {
  let InstructionSet = T81Instrs;
  let AssemblyWriters = [T81];
}

@*1 CMakeLists.txt - LLVM Target Build Rules.
@<CMakeLists.txt@>=
add_llvm_target(T81CodeGen
  T81ISelLowering.cpp
  T81TargetMachine.cpp
  T81DAGISel.cpp
  T81AsmPrinter.cpp
  T81TargetInfo.cpp
  )

target_link_libraries(T81CodeGen PRIVATE LLVMCodeGen LLVMTarget)

add_subdirectory(AsmPrinter)
add_subdirectory(TargetInfo)
