@* T81Lang HVM Emitter (emit_hvm.cweb) *@

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "config.cweb"  // Include centralized config

@d IRType Codes
#define IR_NOP      0
#define IR_LOAD     1
#define IR_STORE    2
#define IR_ADD      3
#define IR_SUB      4
#define IR_MUL      5
#define IR_DIV      6
#define IR_RETURN   7
#define IR_LABEL    8
#define IR_JUMP     9
#define IR_JUMP_IF 10

@d Emit HVM Text Format
void emit_hvm_text(FILE* in, FILE* out) {
    char line[256];
    while (fgets(line, sizeof(line), in)) {
        int opcode;
        char arg1[64] = {0}, arg2[64] = {0}, result[64] = {0};
        if (sscanf(line, "%d %63s %63s -> %63s", &opcode, arg1, arg2, result) >= 1) {
            // Check config for symbolic expansion and verbosity
            if (config.symbolic_expansion_enabled) {
                // Add symbolic expansion if enabled (future implementation)
                // e.g., replace arguments with symbolic names
            }
            
            switch (opcode) {
                case IR_NOP:
                    if (config.verbosity_level >= 2) fprintf(out, "; NOP\n");
                    break;
                case IR_LOAD:
                    if (config.verbosity_level >= 1) fprintf(out, "LOAD %s -> %s\n", arg1, result);
                    break;
                case IR_STORE:
                    if (config.verbosity_level >= 1) fprintf(out, "STORE %s -> %s\n", arg1, result);
                    break;
                case IR_ADD:
                    if (config.verbosity_level >= 1) fprintf(out, "ADD %s %s -> %s\n", arg1, arg2, result);
                    break;
                case IR_SUB:
                    if (config.verbosity_level >= 1) fprintf(out, "SUB %s %s -> %s\n", arg1, arg2, result);
                    break;
                case IR_MUL:
                    if (config.verbosity_level >= 1) fprintf(out, "MUL %s %s -> %s\n", arg1, arg2, result);
                    break;
                case IR_DIV:
                    if (config.verbosity_level >= 1) fprintf(out, "DIV %s %s -> %s\n", arg1, arg2, result);
                    break;
                case IR_RETURN:
                    if (config.verbosity_level >= 1) fprintf(out, "RETURN %s\n", arg1);
                    break;
                case IR_LABEL:
                    if (config.verbosity_level >= 2) fprintf(out, "LABEL %s:\n", result);
                    break;
                case IR_JUMP:
                    if (config.verbosity_level >= 2) fprintf(out, "JUMP %s\n", result);
                    break;
                case IR_JUMP_IF:
                    if (config.verbosity_level >= 2) fprintf(out, "JUMP_IF %s -> %s\n", arg1, result);
                    break;
                default:
                    fprintf(out, "; UNKNOWN OPCODE %d\n", opcode);
                    break;
            }
        }
    }
}

@d Emit HVM Binary Format
void emit_hvm_binary(FILE* in, FILE* out) {
    char line[256];
    while (fgets(line, sizeof(line), in)) {
        int opcode;
        char arg1[64] = {0}, arg2[64] = {0}, result[64] = {0};
        if (sscanf(line, "%d %63s %63s -> %63s", &opcode, arg1, arg2, result) >= 1) {
            fwrite(&opcode, sizeof(int), 1, out);
            fwrite(arg1, sizeof(char), 64, out);
            fwrite(arg2, sizeof(char), 64, out);
            fwrite(result, sizeof(char), 64, out);
        }
    }
}

@d Emit HVM Dispatcher
void emit_hvm(const char* ir_file, const char* out_file) {
    FILE* in = fopen(ir_file, "r");
    FILE* out = fopen(out_file, config.hvm_binary_mode ? "wb" : "w");  // Use config for binary mode
    if (!in || !out) {
        fprintf(stderr, "[Error] Could not open IR or HVM output file.\n");
        return;
    }

    if (config.hvm_binary_mode) {
        emit_hvm_binary(in, out);
    } else {
        emit_hvm_text(in, out);
    }

    fclose(in);
    fclose(out);

    printf("[emit_hvm] HVM output written to %s (%s mode)\n", out_file, config.hvm_binary_mode ? "binary" : "text");
}

@d Unit Test Entry (Optional)
#ifdef TEST_HVM_EMIT
int main(int argc, char** argv) {
    bool binary = argc > 1 && strcmp(argv[1], "--binary") == 0;
    emit_hvm("output.ir", binary ? "test.hvm.bin" : "test.hvm");
    return 0;
}
#endif
