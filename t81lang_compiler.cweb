@* T81Lang Compiler Entry Point (t81lang_compiler.cweb) *@

#include <stdio.h>
#include <stdlib.h>

@d External Modules
extern void set_source(const char* code);
extern void advance_token();
extern struct ASTNode* parse_program();
extern void analyze_program(struct ASTNode* root);
extern void generate_program(struct ASTNode* root);
extern void print_ir();
extern void export_ir(const char* filename);

@d ASTNodeType Reference
typedef enum {
    AST_PROGRAM,
    AST_FUNCTION,
    AST_STATEMENT,
    AST_RETURN,
    AST_ASSIGNMENT,
    AST_IDENTIFIER,
    AST_LITERAL,
    AST_BINARY_EXPR,
    AST_CALL,
    AST_TYPE,
    AST_PARAM,
    AST_TYPE_ANNOTATION,
    AST_IF,
    AST_WHILE,
    AST_ELSE
} ASTNodeType;

@d ASTNode Struct Reference
typedef struct ASTNode {
    ASTNodeType type;
    char name[64];
    struct ASTNode* left;
    struct ASTNode* right;
    struct ASTNode* body;
    struct ASTNode* next;
} ASTNode;

@d Compiler Pipeline
int main(int argc, char** argv) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <source-file.t81>\n", argv[0]);
        return 1;
    }

    FILE* f = fopen(argv[1], "r");
    if (!f) {
        perror("Error opening file");
        return 1;
    }

    fseek(f, 0, SEEK_END);
    long len = ftell(f);
    rewind(f);

    char* code = malloc(len + 1);
    fread(code, 1, len, f);
    code[len] = '\0';
    fclose(f);

    set_source(code);
    advance_token();
    ASTNode* ast = parse_program();

    printf("--- Semantic Analysis ---\n");
    analyze_program(ast);

    printf("--- IR Generation ---\n");
    generate_program(ast);

    printf("--- IR Output ---\n");
    print_ir();

    export_ir("output.ir");
    free(code);
    return 0;
}
