@* t81_to_hvm.cweb | T81Lang â†’ HVM Bytecode Compiler *@

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <ctype.h>
#include "t81types.h"

#define OP_HALT 0xFF
#define OP_PUSH 0x01

#define T81_TAG_BIGINT     0x01
#define T81_TAG_FRACTION   0x02
#define T81_TAG_FLOAT      0x03
#define T81_TAG_MATRIX     0x04
#define T81_TAG_VECTOR     0x05
#define T81_TAG_TENSOR     0x06
#define T81_TAG_POLYNOMIAL 0x07
#define T81_TAG_GRAPH      0x08
#define T81_TAG_QUATERNION 0x09
#define T81_TAG_OPCODE     0x0A

@<Opcode Map@>=
typedef struct {
    const char* keyword;
    uint8_t opcode;
} OpEntry;

static OpEntry opmap[] = {
    {"push",  0x01},
    {"pop",   0x02},
    {"add",   0x03},
    {"sub",   0x04},
    {"mul",   0x05},
    {"div",   0x06},
    {"mod",   0x07},
    {"neg",   0x08},
    {"abs",   0x09},
    {"cmp3",  0x0A},
    {"jmp",   0x10},
    {"jz",    0x11},
    {"jnz",   0x12},
    {"call",  0x13},
    {"ret",   0x14},
    {"tnn_accum", 0x20},
    {"matmul", 0x21},
    {"fact",  0x30},
    {"fib",   0x31},
    {"tower", 0x32},
    {"ack",   0x33},
    {"bp",    0x34},
    {"halt",  0xFF},
    {"push_vector", 0x35},
    {"push_polynomial", 0x36},
    {"push_graph", 0x37},
    {"push_quaternion", 0x38},
    {"push_opcode", 0x39},
    {NULL,     0x00}
};

@<Utility: Match Opcode@>=
uint8_t lookup_opcode(const char* token) {
    for (int i = 0; opmap[i].keyword != NULL; i++) {
        if (strcmp(opmap[i].keyword, token) == 0) {
            return opmap[i].opcode;
        }
    }
    return 0x00;
}

@<Operand Parser: Base-81 Encoding Stub@>=
uint81_t parse_uint81(const char* str) {
    uint81_t result = {0, 0, 0};
    sscanf(str, "%u:%u:%u", &result.a, &result.b, &result.c);
    return result;
}

@<Write Fraction Operand@>=
void write_fraction(FILE* out, const char* num, const char* denom) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_FRACTION, out);
    uint8_t len_num = (uint8_t)strlen(num);
    fputc(len_num, out);
    for (int i = 0; i < len_num; i++) fputc(num[i] - '0', out);
    uint8_t len_denom = (uint8_t)strlen(denom);
    fputc(len_denom, out);
    for (int i = 0; i < len_denom; i++) fputc(denom[i] - '0', out);
}

@<Write Float Operand@>=
void write_float(FILE* out, const char* mantissa, int8_t exponent) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_FLOAT, out);
    uint8_t len = (uint8_t)strlen(mantissa);
    fputc(len, out);
    for (int i = 0; i < len; i++) fputc(mantissa[i] - '0', out);
    fwrite(&exponent, sizeof(int8_t), 1, out);
}

@<Write Matrix Operand@>=
void write_matrix(FILE* out, int rows, int cols, char** values) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_MATRIX, out);
    fputc((uint8_t)rows, out);
    fputc((uint8_t)cols, out);
    for (int i = 0; i < rows * cols; i++) {
        fputc(T81_TAG_BIGINT, out);
        uint8_t len = (uint8_t)strlen(values[i]);
        fputc(len, out);
        for (int j = 0; j < len; j++) fputc(values[i][j] - '0', out);
    }
}

@<Write Tensor Operand@>=
void write_tensor(FILE* out, int dims, char** tags_and_vals) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_TENSOR, out);
    fputc((uint8_t)dims, out);
    int cursor = 0;
    for (int i = 0; i < dims; i++) {
        int depth = atoi(tags_and_vals[cursor++]);
        fputc((uint8_t)depth, out);
        for (int j = 0; j < depth; j++) {
            uint8_t tag = (uint8_t)atoi(tags_and_vals[cursor++]);
            fputc(tag, out);
            uint8_t len = (uint8_t)strlen(tags_and_vals[cursor]);
            fputc(len, out);
            for (int k = 0; k < len; k++) fputc(tags_and_vals[cursor][k] - '0', out);
            cursor++;
        }
    }
}

@<Write Vector Operand@>=
void write_vector(FILE* out, int len, char** values) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_VECTOR, out);
    fputc((uint8_t)len, out);
    for (int i = 0; i < len; i++) {
        fputc(T81_TAG_BIGINT, out);
        uint8_t len_elem = (uint8_t)strlen(values[i]);
        fputc(len_elem, out);
        for (int j = 0; j < len_elem; j++) fputc(values[i][j] - '0', out);
    }
}

@<Write Polynomial Operand@>=
void write_polynomial(FILE* out, int degree, char** coeffs) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_POLYNOMIAL, out);
    fputc((uint8_t)degree, out);
    for (int i = 0; i < degree; i++) {
        fputc(T81_TAG_BIGINT, out);
        uint8_t len = (uint8_t)strlen(coeffs[i]);
        fputc(len, out);
        for (int j = 0; j < len; j++) fputc(coeffs[i][j] - '0', out);
    }
}

@<Write Graph Operand@>=
void write_graph(FILE* out, int nodes, int edges, char** connections) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_GRAPH, out);
    fputc((uint8_t)nodes, out);
    fputc((uint8_t)edges, out);
    for (int i = 0; i < edges; i++) {
        uint8_t from = (uint8_t)atoi(connections[i * 2]);
        uint8_t to = (uint8_t)atoi(connections[i * 2 + 1]);
        fputc(from, out);
        fputc(to, out);
    }
}

@<Write Quaternion Operand@>=
void write_quaternion(FILE* out, const char* x, const char* y, const char* z, const char* w) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_QUATERNION, out);
    fputc((uint8_t)strlen(x), out);
    for (int i = 0; i < strlen(x); i++) fputc(x[i] - '0', out);
    fputc((uint8_t)strlen(y), out);
    for (int i = 0; i < strlen(y); i++) fputc(y[i] - '0', out);
    fputc((uint8_t)strlen(z), out);
    for (int i = 0; i < strlen(z); i++) fputc(z[i] - '0', out);
    fputc((uint8_t)strlen(w), out);
    for (int i = 0; i < strlen(w); i++) fputc(w[i] - '0', out);
}

@<Write Opcode Operand@>=
void write_opcode(FILE* out, uint8_t opcode) {
    fputc(OP_PUSH, out);
    fputc(T81_TAG_OPCODE, out);
    fputc(opcode, out);
}

@<Main Entry@>=
int main(int argc, char** argv) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <input.t81> <output.hvm>\n", argv[0]);
        return 1;
    }

    FILE* in = fopen(argv[1], "r");
    FILE* out = fopen(argv[2], "wb");
    if (!in || !out) {
        perror("fopen");
        return 1;
    }

    char line[256];
    while (fgets(line, sizeof(line), in)) {
        char* token = strtok(line, " \t\n");
        if (!token || token[0] == '#') continue;

        if (strcmp(token, "push_fraction") == 0) {
            char* num = strtok(NULL, " \t\n");
            char* denom = strtok(NULL, " \t\n");
            write_fraction(out, num, denom); continue;
        }
        if (strcmp(token, "push_float") == 0) {
            char* mantissa = strtok(NULL, " \t\n");
            char* expstr = strtok(NULL, " \t\n");
            int8_t exp = (int8_t)atoi(expstr);
            write_float(out, mantissa, exp); continue;
        }
        if (strcmp(token, "push_matrix") == 0) {
            char* rowstr = strtok(NULL, " \t\n");
            char* colstr = strtok(NULL, " \t\n");
            int rows = atoi(rowstr), cols = atoi(colstr);
            char* values[
