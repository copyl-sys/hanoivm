@* Enhanced T81 Disassembler with Full Type Introspection.

This enhanced disassembler handles all core T81 data types,
in compliance with the Prime Directive: disassemble every
T81 data type at any depth.

@c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

// Type Tags for T81 Data Types
#define T81_TAG_BIGINT     0x01
#define T81_TAG_FRACTION   0x02
#define T81_TAG_FLOAT      0x03
#define T81_TAG_MATRIX     0x04
#define T81_TAG_VECTOR     0x05
#define T81_TAG_TENSOR     0x06
#define T81_TAG_POLYNOMIAL 0x07
#define T81_TAG_GRAPH      0x08
#define T81_TAG_QUATERNION 0x09
#define T81_TAG_OPCODE     0x0A

// Instruction Opcodes
#define OP_PUSH    0x01
#define OP_ADD     0x02
#define OP_PRINT   0x03
#define OP_HALT    0xFF

static void disasm_bigint(FILE *in) {
    uint8_t len;
    fread(&len, 1, 1, in);
    printf("T81BigInt [len=%d] ", len);
    printf("digits=[");
    for (int i = 0; i < len; i++) {
        uint8_t digit;
        fread(&digit, 1, 1, in);
        printf("%d%s", digit, (i < len - 1) ? ", " : "");
    }
    printf("]\n");
}

static void disasm_fraction(FILE *in) {
    printf("T81Fraction { numerator: ");
    disasm_bigint(in);
    printf("  denominator: ");
    disasm_bigint(in);
    printf("}\n");
}

static void disasm_float(FILE *in) {
    printf("T81Float {\n  mantissa: ");
    disasm_bigint(in);
    int8_t exponent;
    fread(&exponent, 1, 1, in);
    printf("  exponent: %d\n}\n", exponent);
}

static void disasm_matrix(FILE *in) {
    uint8_t rows, cols;
    fread(&rows, 1, 1, in);
    fread(&cols, 1, 1, in);
    printf("T81Matrix [%dx%d]:\n", rows, cols);
    for (int r = 0; r < rows; r++) {
        printf("  [");
        for (int c = 0; c < cols; c++) {
            uint8_t tag;
            fread(&tag, 1, 1, in);
            disasm_operand_by_tag(in, tag);
        }
        printf("  ]\n");
    }
}

static void disasm_vector(FILE *in) {
    uint8_t len;
    fread(&len, 1, 1, in);
    printf("T81Vector [len=%d]: [\n", len);
    for (int i = 0; i < len; i++) {
        uint8_t tag;
        fread(&tag, 1, 1, in);
        printf("  element %d: ", i);
        disasm_operand_by_tag(in, tag);
    }
    printf("]\n");
}

static void disasm_tensor(FILE *in) {
    uint8_t dims;
    fread(&dims, 1, 1, in);
    printf("T81Tensor [dims=%d]:\n", dims);
    for (int d = 0; d < dims; d++) {
        uint8_t depth;
        fread(&depth, 1, 1, in);
        printf("  Depth %d: [\n", d);
        for (int i = 0; i < depth; i++) {
            uint8_t tag;
            fread(&tag, 1, 1, in);
            printf("    element %d: ", i);
            disasm_operand_by_tag(in, tag);
        }
        printf("  ]\n");
    }
}

static void disasm_operand_by_tag(FILE *in, uint8_t tag) {
    switch (tag) {
        case T81_TAG_BIGINT:
            disasm_bigint(in); break;
        case T81_TAG_FRACTION:
            disasm_fraction(in); break;
        case T81_TAG_FLOAT:
            disasm_float(in); break;
        case T81_TAG_MATRIX:
            disasm_matrix(in); break;
        case T81_TAG_VECTOR:
            disasm_vector(in); break;
        case T81_TAG_TENSOR:
            disasm_tensor(in); break;
        default:
            printf("UNKNOWN TYPE TAG 0x%02X\n", tag);
            break;
    }
}

void disasm(const char *filename) {
    FILE *in = fopen(filename, "rb");
    if (!in) { perror("open"); exit(1); }
    uint8_t opcode;
    while (fread(&opcode, 1, 1, in) == 1) {
        switch (opcode) {
            case OP_PUSH: {
                uint8_t tag;
                fread(&tag, 1, 1, in);
                printf("PUSH ");
                disasm_operand_by_tag(in, tag);
                break;
            }
            case OP_ADD:
                printf("ADD\n"); break;
            case OP_PRINT:
                printf("PRINT\n"); break;
            case OP_HALT:
                printf("HALT\n"); break;
            default:
                printf("UNKNOWN OPCODE 0x%02X\n", opcode);
                break;
        }
    }
    fclose(in);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file.hvm>\n", argv[0]);
        return 1;
    }
    disasm(argv[1]);
    return 0;
}

@* End of file.
