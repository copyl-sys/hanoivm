@* hanoivm-core.cweb: Recursive HanoiVM Runtime

This file defines the core recursive virtual machine that interprets logic across
three ternary layers: T81 (instructions), T243 (logic trees), and T729 (AI macros).

The runtime recursively interprets, evaluates, and transforms ternary structures.
Each base layer reflects a “dream level,” as described in the TYRNARY architecture.

@c
use crate::libt81::{T81Digit, T81Number};
use crate::libt243::{T243Digit, T243LogicTree, T243Node};
use crate::libt729::{T729Digit, T729MacroEngine};

/// The recursive HanoiVM runtime instance
pub struct HanoiVM {
    pub macro_engine: T729MacroEngine, // T729 executor and registry
    pub frame_stack: Vec<T243LogicTree>, // Active execution frames
    pub output_log: Vec<T81Number>,      // Output from each step
}

impl HanoiVM {
    /// Initialize the HanoiVM with a macro engine and empty stack
    pub fn new() -> Self {
        HanoiVM {
            macro_engine: T729MacroEngine::new(),
            frame_stack: Vec::new(),
            output_log: Vec::new(),
        }
    }

    /// Load a new logic frame (T243 tree) onto the stack
    pub fn push_frame(&mut self, tree: T243LogicTree) {
        self.frame_stack.push(tree);
    }

    /// Execute the entire stack recursively
    pub fn run(&mut self) {
        while let Some(frame) = self.frame_stack.pop() {
            let result = frame.evaluate(); // T243Node → T81Number
            self.output_log.push(result);
        }
    }

    /// Execute a T729 macro by digit (high-level AI instruction)
    pub fn exec_macro(&mut self, digit: T729Digit, inputs: Vec<T81Number>) {
        if let Some(result) = self.macro_engine.execute(digit, inputs) {
            self.output_log.push(result);
        } else {
            eprintln!("[WARN] Undefined T729 macro at index: {}", digit.0);
        }
    }

    /// Inspect the final output after recursive execution
    pub fn final_output(&self) -> Option<&T81Number> {
        self.output_log.last()
    }

    /// Full symbolic trace of the execution
    pub fn trace(&self) {
        println!("== HanoiVM Execution Trace ==");
        for (i, out) in self.output_log.iter().enumerate() {
            println!("Step {}: {}", i, out);
        }
    }
}
@*
This module defines the full HanoiVM lifecycle:
- Stack-based recursive execution of T243 logic
- Macro-instruction decoding through T729
- Output monitoring and result tracing

Next: Integration with Axion AI for introspective optimization and learning.
