@* hanoivm_vm.cweb | HanoiVM Execution Core — AI-Aware, Recursive, and Config-Integrated *@

This file defines the main execution loop for HanoiVM:
- Executes T81, T243, and T729 instruction sets
- Applies Axion AI hooks via axion_signal and entropy tracing
- Supports runtime promotion/demotion between ternary levels
- Implements recursion ops (FIB, FACT), tensor ops, and stack-aware promotion
- Refactored for FFI: shared stack ops, opcode execution, and context structs
@#

@<Include Dependencies@>=
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "config.h"  // Include centralized config
#include "t81_stack.h"
#include "hvm_loader.h"
#include "ai_hook.h"
#include "advanced_ops.h"
#include "disassembler.h"
#include "ternary_base.h"
#include "t243bigint.h"
#include "t81recursion.h"
#include "hvm_promotion.h"
#include "recurse81.h"
@#

@<Extern τ-registers@>=
extern int τ[28];  // τ0–τ26 + τ27 for Axion AI
@#

@<VM Context Definition@>=
typedef struct {
    size_t ip;               // Instruction pointer
    int halted;              // HALT signal
    int recursion_depth;     // Recursion tracking
    int mode;                // Current ternary logic mode
    int mode_flags;          // Promotion flags
    int call_depth;          // Stack promotion metric
} HVMContext;
@#

@<Ternary Operand Loader@>=
uint81_t fetch_operand(const uint8_t* buf) {
    uint81_t out;
    out.a = ((uint32_t)buf[0] << 24) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[2] << 8) | buf[3];
    out.b = ((uint32_t)buf[4] << 24) | ((uint32_t)buf[5] << 16) | ((uint32_t)buf[6] << 8) | buf[7];
    out.c = buf[8];
    return out;
}
@#

@<Opcode Constants@>=
#define OP_T729_DOT          0xE1
#define OP_T729_PRINT        0xE2
#define OP_RECURSE_FACT      0xF1
#define OP_RECURSE_FIB       0xF2
#define OP_PROMOTE_T243      0xF0
#define OP_PROMOTE_T729      0xF3
#define OP_DEMOTE_T243       0xF4
#define OP_DEMOTE_T81        0xF5
#define OP_RECURSE_DISPATCH  0x1E
#define OP_RECURSE_ENTROPY   0x1F
@#

@<Opcode Execution Functions@>=

void handle_promote_t243(HVMContext* ctx) {
    promote_to_t243(ctx);
}

void handle_promote_t729(HVMContext* ctx) {
    promote_to_t729(ctx);
}

void handle_demote_stack(HVMContext* ctx) {
    demote_stack(ctx);
}

void handle_t729_dot() {
    TernaryHandle b = stack_pop();
    TernaryHandle a = stack_pop();
    TernaryHandle r;
    t729tensor_contract(a, b, &r);
    stack_push(r);
}

void handle_t729_print() {
    TernaryHandle a = stack_pop();
    printf("[T729] Tensor @ %p\n", a.data);
    stack_push(a);
}

void handle_recurse_fact() {
    T81BigIntHandle n = stack_pop();
    T81BigIntHandle r;
    if (t81bigint_factorial_recursive(n, &r) == TRIT_OK)
        stack_push(r);
    else
        fprintf(stderr, "[VM] RECURSE_FACT error\n");
    t81bigint_free(n);
}

void handle_recurse_fib() {
    T81BigIntHandle n = stack_pop();
    T81BigIntHandle r;
    if (t81bigint_fibonacci_tail(n, &r) == TRIT_OK)
        stack_push(r);
    else
        fprintf(stderr, "[VM] RECURSE_FIB error\n");
    t81bigint_free(n);
}

void handle_push(HVMContext* ctx) {
    if (ctx->ip + 8 >= hvm_code_size) {
        fprintf(stderr, "[VM] PUSH operand overflow\n");
        return;
    }
    uint81_t val = fetch_operand(&hvm_code[ctx->ip]);
    ctx->ip += 9;
    push81u(val);
}

void handle_math_operations(int opcode) {
    switch (opcode) {
        case OP_ADD: add81(); break;
        case OP_SUB: sub81(); break;
        case OP_MUL: mul81(); break;
        case OP_DIV: div81(); break;
        case OP_MOD: mod81(); break;
        case OP_NEG: neg81(); break;
        case OP_ABS: abs81(); break;
        case OP_CMP3: cmp381(); break;
    }
}

void handle_ai_operations(int opcode, HVMContext* ctx) {
    if (ctx->ip + 17 >= hvm_code_size) {
        fprintf(stderr, "[VM] AI op operand overflow\n");
        return;
    }
    uint81_t a = fetch_operand(&hvm_code[ctx->ip]);
    uint81_t b = fetch_operand(&hvm_code[ctx->ip + 9]);
    ctx->ip += 18;
    uint81_t result = evaluate_opcode(opcode, a, b, ctx);
    push81u(result);
}
@#

@<Opcode Execution Helper@>=
int vm_run_max_steps(HVMContext* ctx, int max_steps) {
    t81_vm_init();
    int steps = 0;
    while (!ctx->halted && ctx->ip < hvm_code_size && steps < max_steps) {
        uint8_t opcode = hvm_code[ctx->ip++];
        axion_signal(opcode);
        τ[AXION_REGISTER_INDEX] = axion_get_optimization();

        // Check if debug mode is enabled in config
        if (config.enable_debug_mode) {
            char trace[128];
            snprintf(trace, sizeof(trace), "[TRACE] OP[%s] at IP=%zu", opcode_name(opcode), ctx->ip - 1);
            axion_log(trace);
        }

        TRACE_MODE(ctx);
        PROMOTE_T243(ctx);
        PROMOTE_T729(ctx);
        DEMOTE_STACK(ctx);

        // Execute operation based on opcode
        switch (opcode) {
            case OP_PROMOTE_T243: handle_promote_t243(ctx); break;
            case OP_PROMOTE_T729: handle_promote_t729(ctx); break;
            case OP_DEMOTE_T243:
            case OP_DEMOTE_T81: handle_demote_stack(ctx); break;

            case OP_T729_DOT: handle_t729_dot(); break;
            case OP_T729_PRINT: handle_t729_print(); break;
            case OP_RECURSE_FACT: handle_recurse_fact(); break;
            case OP_RECURSE_FIB: handle_recurse_fib(); break;
            case OP_RECURSE_DISPATCH: dispatch_recursive_symbolic(); break;
            case OP_RECURSE_ENTROPY: dispatch_entropy_recursive(); break;
            case OP_NOP: break;
            case OP_PUSH: handle_push(ctx); break;
            default:
                handle_math_operations(opcode);
                if (opcode == OP_TNN_ACCUM || opcode == OP_T81_MATMUL) {
                    handle_ai_operations(opcode, ctx);
                }
                break;
        }
        steps++;
    }
    return steps;
}

@<VM Execution Function@>=
void execute_vm(void) {
    HVMContext ctx = {
        .ip = 0, .halted = 0,
        .recursion_depth = 0,
        .mode = config.ternary_logic_mode == "T243" ? MODE_T243 : (config.ternary_logic_mode == "T729" ? MODE_T729 : MODE_T81),
        .mode_flags = 0,
        .call_depth = 0
    };
    vm_run_max_steps(&ctx, 100000);  // default step limit
}

@h VM Public API Header
#ifndef HANOIVM_VM_H
#define HANOIVM_VM_H

#include "t81types.h"

typedef struct {
    size_t ip;
    int halted;
    int recursion_depth;
    int mode;
    int mode_flags;
    int call_depth;
} HVMContext;

void execute_vm(void);
int vm_run_max_steps(HVMContext* ctx, int max_steps);
uint81_t fetch_operand(const uint8_t* buf);
void push81u(uint81_t val);
uint81_t pop81u(void);

#endif
@#
