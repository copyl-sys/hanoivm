@* Enhanced T81 Disassembler with Tier Mode Awareness and Ghidra Integration. *@

@c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "hvm_context.h"

// Type Tags for T81 Data Types
#define T81_TAG_BIGINT     0x01
#define T81_TAG_FRACTION   0x02
#define T81_TAG_FLOAT      0x03
#define T81_TAG_MATRIX     0x04
#define T81_TAG_VECTOR     0x05
#define T81_TAG_TENSOR     0x06
#define T81_TAG_POLYNOMIAL 0x07
#define T81_TAG_GRAPH      0x08
#define T81_TAG_QUATERNION 0x09
#define T81_TAG_OPCODE     0x0A

// Instruction Opcodes
#define OP_PUSH    0x01
#define OP_ADD     0x02
#define OP_PRINT   0x03
#define OP_HALT    0xFF
#define OP_PROMOTE_T243 0xF0
#define OP_PROMOTE_T729 0xF1
#define OP_DEMOTE_T243  0xF2
#define OP_DEMOTE_T81   0xF3

// Hook for Ghidra integration output
#define GHIDRA_OUT stdout

const char* get_mode_label(int mode) {
    switch (mode) {
        case MODE_T81: return "T81";
        case MODE_T243: return "T243";
        case MODE_T729: return "T729";
        default: return "UNKNOWN";
    }
}

static void disasm_bigint(FILE *in) {
    uint8_t len;
    fread(&len, 1, 1, in);
    fprintf(GHIDRA_OUT, "T81BigInt [len=%d] ", len);
    fprintf(GHIDRA_OUT, "digits=[");
    for (int i = 0; i < len; i++) {
        uint8_t digit;
        fread(&digit, 1, 1, in);
        fprintf(GHIDRA_OUT, "%d%s", digit, (i < len - 1) ? ", " : "");
    }
    fprintf(GHIDRA_OUT, "]\n");
}

static void disasm_operand_by_tag(FILE *in, uint8_t tag) {
    switch (tag) {
        case T81_TAG_BIGINT:
            disasm_bigint(in); break;
        default:
            fprintf(GHIDRA_OUT, "UNKNOWN TYPE TAG 0x%02X\n", tag);
            break;
    }
}

void disasm(const char *filename) {
    FILE *in = fopen(filename, "rb");
    if (!in) { perror("open"); exit(1); }

    int mode = MODE_T81;
    uint8_t opcode;
    while (fread(&opcode, 1, 1, in) == 1) {
        switch (opcode) {
            case OP_PUSH: {
                uint8_t tag;
                fread(&tag, 1, 1, in);
                fprintf(GHIDRA_OUT, "PUSH ");
                disasm_operand_by_tag(in, tag);
                break;
            }
            case OP_ADD:
                fprintf(GHIDRA_OUT, "ADD\n"); break;
            case OP_PRINT:
                fprintf(GHIDRA_OUT, "PRINT\n"); break;
            case OP_HALT:
                fprintf(GHIDRA_OUT, "HALT\n"); break;
            case OP_PROMOTE_T243:
                fprintf(GHIDRA_OUT, "PROMOTE_T243 // MODE: %s -> T243\n", get_mode_label(mode));
                mode = MODE_T243; break;
            case OP_PROMOTE_T729:
                fprintf(GHIDRA_OUT, "PROMOTE_T729 // MODE: %s -> T729\n", get_mode_label(mode));
                mode = MODE_T729; break;
            case OP_DEMOTE_T243:
                fprintf(GHIDRA_OUT, "DEMOTE_T243 // MODE: %s -> T243\n", get_mode_label(mode));
                mode = MODE_T243; break;
            case OP_DEMOTE_T81:
                fprintf(GHIDRA_OUT, "DEMOTE_T81 // MODE: %s -> T81\n", get_mode_label(mode));
                mode = MODE_T81; break;
            default:
                fprintf(GHIDRA_OUT, "UNKNOWN OPCODE 0x%02X\n", opcode);
                break;
        }
    }
    fclose(in);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file.hvm>\n", argv[0]);
        return 1;
    }
    disasm(argv[1]);
    return 0;
}

@* End of file. *@
