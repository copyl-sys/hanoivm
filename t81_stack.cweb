@* t81_stack.cweb | Stack Management for HanoiVM with Safe Operations and Extensions
This module defines the full implementation of the T81 stack, the foundational stack for the recursive HanoiVM ternary virtual machine.

Included Features:
- Stack memory for up to 3^7 (2187) ternary values.
- Safe core operations: `push81`, `pop81`, `peek81`, `push81u`, `pop81u`.
- Arithmetic operations: `add81`, `mod81`, `neg81`.
- Conditional operation: `ifz81` (if zero).
- Stack control operations: `dup81`, `swap81`, `drop81`.
- Future extension for stack promotion (T243 / T729).
- External function headers via `@h` block for linkage.
@#

@<Include Dependencies@>=
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h> // For boolean type support
#include "config.h"   // Configuration constants (e.g., stack size, thresholds)
#include "ai_hook.h"     // AI integration for stack monitoring and logging
#include "hvm_loader.h"  // Loader for the HanoiVM context
#include "t81types.h"    // T81-specific types such as uint81_t
@#

// Dynamic Stack Size from config.cweb
#define T81_STACK_SIZE config.stack_size
#define STACK_OVERFLOW_ERR -1
#define STACK_UNDERFLOW_ERR -2

@<Stack State Structure@>=
static int t81_stack[T81_STACK_SIZE];
static int t81_sp = -1;
@#

@<T81 Stack API Declarations@>=
void push81(int value);
int  pop81(void);
int  peek81(void);

void push81u(uint81_t val);
uint81_t pop81u(void);

void add81(void);
void mod81(void);
void neg81(void);

bool ifz81(void);

void dup81(void);
void swap81(void);
void drop81(void);
@#

@<T81 Stack Core Functions@>=
void push81(int value) {
    if (config.safe_stack_enabled && t81_sp >= T81_STACK_SIZE - 1) {
        fprintf(stderr, "[T81] Stack overflow!\n");
        if (config.enable_debug_mode) axion_log("[T81 Error] Stack overflow during push operation");
        exit(STACK_OVERFLOW_ERR);
    }
    t81_stack[++t81_sp] = value;
    if (config.log_level >= 2) axion_log("[Stack Push] Value pushed to stack");
}

int pop81(void) {
    if (config.safe_stack_enabled && t81_sp < 0) {
        fprintf(stderr, "[T81] Stack underflow!\n");
        if (config.enable_debug_mode) axion_log("[T81 Error] Stack underflow during pop operation");
        exit(STACK_UNDERFLOW_ERR);
    }
    int value = t81_stack[t81_sp--];
    if (config.log_level >= 2) axion_log("[Stack Pop] Value popped from stack");
    return value;
}

int peek81(void) {
    if (config.safe_stack_enabled && t81_sp < 0) {
        fprintf(stderr, "[T81] Stack empty (peek)\n");
        if (config.enable_debug_mode) axion_log("[T81 Error] Attempted peek on empty stack");
        exit(STACK_UNDERFLOW_ERR);
    }
    return t81_stack[t81_sp];
}

void push81u(uint81_t val) {
    push81(val.c);
    push81(val.b);
    push81(val.a);
    if (config.log_level >= 2) axion_log("[T81 Push81u] Packed uint81_t pushed");
}

uint81_t pop81u(void) {
    uint81_t val;
    val.a = pop81();
    val.b = pop81();
    val.c = pop81();
    if (config.log_level >= 2) axion_log("[T81 Pop81u] Packed uint81_t popped");
    return val;
}
@#

@<T81 Arithmetic Extensions@>=
void add81(void) {
    int a = pop81();
    int b = pop81();
    int result = a + b;
    push81(result);
    if (config.log_level >= 1) axion_log("[T81 Arithmetic] add81: %d + %d = %d", a, b, result);
}

void mod81(void) {
    int a = pop81();
    int b = pop81();
    if (b == 0) {
        fprintf(stderr, "[T81] mod81: Division by zero!\n");
        if (config.log_level >= 1) axion_log("[T81 Error] mod81: Division by zero");
        exit(1);
    }
    int result = a % b;
    push81(result);
    if (config.log_level >= 1) axion_log("[T81 Arithmetic] mod81: %d %% %d = %d", a, b, result);
}

void neg81(void) {
    int a = pop81();
    int result = -a;
    push81(result);
    if (config.log_level >= 1) axion_log("[T81 Arithmetic] neg81: -%d = %d", a, result);
}

bool ifz81(void) {
    int a = peek81();
    if (config.log_level >= 1) axion_log("[T81 Conditional] ifz81: top = %d (%s)", a, a == 0 ? "TRUE" : "FALSE");
    return a == 0;
}
@#

@<T81 Stack Control Operations@>=
void dup81(void) {
    int val = peek81();
    push81(val);
    if (config.log_level >= 1) axion_log("[T81 Stack Control] dup81: duplicated %d", val);
}

void swap81(void) {
    if (t81_sp < 1) {
        fprintf(stderr, "[T81] swap81: Not enough elements\n");
        if (config.log_level >= 1) axion_log("[T81 Error] swap81: Not enough elements on stack");
        exit(1);
    }
    int a = pop81();
    int b = pop81();
    push81(a);
    push81(b);
    if (config.log_level >= 1) axion_log("[T81 Stack Control] swap81: swapped top two values");
}

void drop81(void) {
    if (t81_sp < 0) {
        fprintf(stderr, "[T81] drop81: Stack empty\n");
        if (config.log_level >= 1) axion_log("[T81 Error] drop81: Stack empty");
        exit(1);
    }
    int val = pop81();
    if (config.log_level >= 1) axion_log("[T81 Stack Control] drop81: dropped %d", val);
}
@#

@h
@<T81 Stack API Declarations@>
@#
