@* t81_to_hvm.cweb | T81Lang â†’ HVM Bytecode Compiler *@

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <ctype.h>
#include "t81types.h"

#define OP_HALT 0xFF

@<Opcode Map@>=
typedef struct {
    const char* keyword;
    uint8_t opcode;
} OpEntry;

static OpEntry opmap[] = {
    {"push",  0x01},
    {"pop",   0x02},
    {"add",   0x03},
    {"sub",   0x04},
    {"mul",   0x05},
    {"div",   0x06},
    {"mod",   0x07},
    {"neg",   0x08},
    {"abs",   0x09},
    {"cmp3",  0x0A},
    {"jmp",   0x10},
    {"jz",    0x11},
    {"jnz",   0x12},
    {"call",  0x13},
    {"ret",   0x14},
    {"tnn_accum", 0x20},
    {"matmul", 0x21},
    {"fact",  0x30},
    {"fib",   0x31},
    {"tower", 0x32},
    {"ack",   0x33},
    {"bp",    0x34},
    {"halt",  0xFF},
    {NULL,     0x00}
};

@<Utility: Match Opcode@>=
uint8_t lookup_opcode(const char* token) {
    for (int i = 0; opmap[i].keyword != NULL; i++) {
        if (strcmp(opmap[i].keyword, token) == 0) {
            return opmap[i].opcode;
        }
    }
    return 0x00;
}

@<Operand Parser: Base-81 Encoding Stub@>=
uint81_t parse_uint81(const char* str) {
    uint81_t result = {0, 0, 0};
    sscanf(str, "%u:%u:%u", &result.a, &result.b, &result.c);
    return result;
}

@<Main Entry@>=
int main(int argc, char** argv) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <input.t81> <output.hvm>\n", argv[0]);
        return 1;
    }

    FILE* in = fopen(argv[1], "r");
    FILE* out = fopen(argv[2], "wb");
    if (!in || !out) {
        perror("fopen");
        return 1;
    }

    char line[256];
    while (fgets(line, sizeof(line), in)) {
        char* token = strtok(line, " \t\n");
        if (!token || token[0] == '#') continue;

        uint8_t opcode = lookup_opcode(token);
        fwrite(&opcode, 1, 1, out);

        if (strcmp(token, "push") == 0 || strcmp(token, "jmp") == 0 ||
            strcmp(token, "jz") == 0 || strcmp(token, "jnz") == 0 ||
            strcmp(token, "tnn_accum") == 0 || strcmp(token, "matmul") == 0) {

            char* op1 = strtok(NULL, " \t\n");
            char* op2 = strtok(NULL, " \t\n");
            uint81_t a = parse_uint81(op1);
            fwrite(&a, sizeof(uint81_t), 1, out);

            if (op2) {
                uint81_t b = parse_uint81(op2);
                fwrite(&b, sizeof(uint81_t), 1, out);
            }
        }
    }

    fputc(OP_HALT, out);
    fclose(in);
    fclose(out);
    printf("[\u2713] Compiled %s \u2192 %s\n", argv[1], argv[2]);
    return 0;
}

@h
@<Opcode Map@>
@<Utility: Match Opcode@>
@<Operand Parser: Base-81 Encoding Stub@>
@<Main Entry@>

@* End of t81_to_hvm.cweb *@
